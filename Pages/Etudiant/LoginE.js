   const API_URL = "https://upbeat-vagarious-casen.ngrok-free.dev/api/student-login";

   // V√©rification imm√©diate d'Axios global au chargement du script (pour d√©bogage)
   if (typeof axios === 'undefined') {
     console.error("‚ùå Axios n'est pas charg√© ! V√©rifiez le script CDN dans le HTML.");
     alert("Erreur : Axios non disponible. Rechargez l'app.");
   } else {
     console.log("‚úÖ Axios global charg√© avec succ√®s (version:", axios.VERSION || "inconnue", ")");
   }

   // Fonction de login pour les √©tudiants (mise √† jour pour stocker en localStorage)
   async function loginStudent() {
     const email = document.getElementById("email").value.trim();
     const password = document.getElementById("password").value.trim();

     // Validation des entr√©es
     if (!email || !password) {
       alert("‚ö†Ô∏è Veuillez remplir tous les champs !");
       return;
     }

     // V√©rification Axios avant l'appel (redondante mais s√ªre)
     if (typeof axios === 'undefined') {
       console.error("‚ùå Axios non disponible dans loginStudent.");
       alert("Erreur : Axios non charg√©. V√©rifiez la console.");
       return;
     }

     try {
       console.log("Tentative de connexion √©tudiant pour l'email:", email); // Log de d√©bogage
       console.log("URL API utilis√©e:", API_URL); // Confirme le serveur distant

       const response = await axios.post(API_URL, {
         email: email,
         password: password,
       });

       console.log("R√©ponse API login re√ßue:", response.data); // Log de la r√©ponse (CRUCIAL pour v√©rifier la structure)

       if (response.data.success) {
         // STOCKAGE EN LOCALSTORAGE (NOUVEAU !)
         const student = response.data.student; // Ou response.data.eleve si diff√©rent
         if (student && student.id) { // V√©rifiez les champs exacts via le log ci-dessus
           localStorage.setItem('studentId', student.id); // ID pour fetchSeances
           localStorage.setItem('studentName', student.nom || student.name); // Nom pour affichage
           console.log("‚úÖ Donn√©es √©tudiant stock√©es :", {
             studentId: student.id,
             studentName: student.nom || student.name
           });
         } else {
           console.error("‚ùå Structure r√©ponse inattendue : pas de student.id");
           alert("‚ö†Ô∏è Erreur : Donn√©es √©tudiant incompl√®tes dans la r√©ponse API.");
           return;
         }

         alert("Connexion r√©ussie ‚úÖ Bienvenue " + (student.nom || "√âtudiant"));
         // Redirection vers la page d'accueil √©tudiant
         window.location.href = "AcceuilE.html";
       } else {
         alert("‚ùå Identifiants incorrects");
       }
     } catch (error) {
       console.error("Erreur API d√©taill√©e :", error); // Log complet pour d√©bogage
       if (error.response) {
         // Erreur du serveur (ex. : 4xx/5xx)
         alert("‚ùå Erreur serveur : " + (error.response.data.message || "Identifiants invalides"));
       } else if (error.request) {
         // Pas de r√©ponse (r√©seau/timeout)
         alert("‚ùå Impossible de se connecter au serveur (v√©rifiez votre internet ou l'URL)");
       } else {
         // Erreur locale (ex. : syntaxe)
         alert("‚ùå Erreur inattendue : " + error.message);
       }
     }
   }

   // Fonction logout (si pas d√©j√† pr√©sente ; sinon, gardez-la dans EmploiE.js)
   function logout() {
     console.log("üîÑ Tentative de d√©connexion...");

     if (confirm("Voulez-vous vraiment vous d√©connecter ?")) {
       localStorage.clear(); // Efface tout, y compris studentId et studentName
       console.log("‚úÖ Session effac√©e (localStorage cleared).");
       window.location.href = "index.html";
     } else {
       console.log("‚ùå D√©connexion annul√©e par l'utilisateur.");
     }
   }
   